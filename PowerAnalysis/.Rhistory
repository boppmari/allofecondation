library(adegenet)
library(ade4)
#library(devtools)
#install_github("jgx65/hierfstat")
###### run from here
library("hierfstat")
library(ggplot2)
library("Hmisc")
library(corrplot)
library(PopGenKit)
library(poppr)
library(knitr)
library(reshape)
java2df <- function(infile){
# infile with full path e.g. infile="C:/Users/gayl/DONNEES/DATA_2/Medicago_systemerepro/Intrapop/pop_F20043/haplo_java_OK/F20043_3years_CORRECTED_java_filtered.csv"
total <- read.table(infile, header=T, sep=";", colClasses="character")
total_OK <- total[,-1:-5]
locnames <- colnames(total)[-1:-5]
Nind = nrow(total)
Nloc = length(locnames)
dimnames(total_OK) = list(total[,5],locnames)
for (i in (1:nrow(total_OK))) {
for (j in (1:ncol(total_OK))) {
total_OK[i,j] <- ifelse(total_OK[i,j]=="0",NA,ifelse(nchar(total_OK[i,j])<6
,paste("0",total_OK[i,j],sep=""),total_OK[i,j]))
}
}
pop <- total[,1]
region <- total[,2]
pop_year <- total[,3]
year <- total[,4]
return(list(total, total_OK, pop, region, year, pop_year))
}
total_OK_list <- java2df("~/DATA/total_pop_filtered.csv")
total <- total_OK_list[[1]]
total_OK <- total_OK_list[[2]]
pop <- as.data.frame(total_OK_list[[3]])
region <- as.data.frame(total_OK_list[[4]])
year <- as.data.frame(total_OK_list[[5]])
pop_year <- as.data.frame(total_OK_list[[6]])
Nloc <- ncol(total_OK)
locnames <- colnames(total_OK)
Nech <- with(total,table(pop_year))
Npop1 <- Nech[[1]]
Npop2 <- Nech[[2]]
Npop3 <- Nech[[3]]
Npop4 <- Nech[[4]]
Npop5 <- Nech[[5]]
Npop6 <- Nech[[6]]
Npop7 <- Nech[[7]]
Npop8 <- Nech[[8]]
Npop9 <- Nech[[9]]
Npop10 <- Nech[[10]]
Npop11 <- Nech[[11]]
Npop12 <- Nech[[12]]
Npop13 <- Nech[[13]]
Npop14 <- Nech[[14]]
Npop15 <- Nech[[15]]
Npop16 <- Nech[[16]]
Npop17 <- Nech[[17]]
Npop18 <- Nech[[18]]
Npop19 <- Nech[[19]]
Npop20 <- Nech[[20]]
Npop21 <- Nech[[21]]
Npop22 <- Nech[[22]]
Nind=nrow(total)
pop_genind <- df2genind(X=total_OK, ncode=3, ploidy=2, pop=total[,1])
strata <- data.frame(total$region, total$pop, total$year)
colnames(strata) <- c("Region", "Pop", "Year")
strata(pop_genind) <- strata
nameStrata(pop_genind) <- ~Region/Pop/Year
pop_genind
all_rich<-read.table("~/DATA/ADZE/ADZE_total_r")
colnames(all_rich)<-c("Annee","N","Nloc","mean_allrich","var_allrich","sd_allrich")
Na <- subset(all_rich, all_rich$N == 60)
#par(mfrow=c(1,1))
#plot(Na$mean_allrich)
pop_year <- colsplit(Na[,1], split="_", c("pop","year"))
Na <- cbind(pop_year, Na[,-1])
region <- as.data.frame(c(rep("Espagne",6),rep("Corse",9),rep("France",7)))
colnames(region) <- c("Region")
Na <- cbind(region, Na)
rownames(Na) <- c(1:nrow(Na))
Na$year <- as.factor(Na$year)
nb_year <- as.data.frame(c(2,1,2,1,2,1,2,1,3,1,2,3,2,1,3,2,1,2,1,1,2,3), row.names = rownames(Na))
colnames(nb_year) <- c("nb_year")
Na <- cbind(Na, nb_year)
Na$nb_year <- as.factor(Na$nb_year)
par(mfrow=c(1,3))
plot(mean_allrich~Region, data=Na, main="Mean_allrich in function of region")
plot(mean_allrich~pop, data=Na, las=2, main = "Mean_allrich in function of population")
plot(mean_allrich~nb_year, data=Na, las=1, main = "Mean_allrich in function of year")
par(mfrow=c(1,1))
barplot(tapply(Na$mean_allrich, list(Na$nb_year, Na$pop), mean), beside=T, ylim=c(0,7), col=c("orange","yellow","cornsilk"))
labs <- c("year_1", "year_2", "year_3")
legend("topleft", labs, fill = c("orange", "yellow", "cornsilk"))
model <- aov(Na$mean_allrich~Na$nb_year*Na$pop)
summary(model)
summary.lm(model)
test <- subset(Na, Na$nb_year != 3)
par(mfrow=c(1,1))
barplot(tapply(test$mean_allrich, list(test$nb_year, test$pop), mean), beside=T, ylim=c(0,7), col=c("orange","yellow"))
labs <- c("year_1", "year_2")
legend("topleft", labs, fill = c("orange", "yellow"))
model <- aov(test$mean_allrich~test$nb_year*test$pop)
summary.lm(model)
View(test)
model <- lm(test$mean_allrich~test$nb_year*test$pop)
summary(model)
model <- lm(Na$mean_allrich~Na$nb_year*Na$pop)
summary(model)
summary(reg_year)
reg_year <- lm(mean_allrich~nb_year, data=Na)
anova(reg_year)
summary(reg_year)
model <- lm(Na$mean_allrich~Na$nb_year+Na$pop)
summary(model)
tapply(Na$mean_allrich, Na$nb_year, var)
fligner.test(Na$mean_allrich~Na$population)
fligner.test(Na$mean_allrich~Na$nb_year)
bartlett.test(Na$mean_allrich~Na$nb_year) # (more a test of non normality than of equality of variances)
plot(Na$mean_allrich)
summary(reg_year)
descriptif <- read.table(file = "He.csv", sep = ";", header = TRUE, dec = ",")
descriptif[,3] <- as.factor(descriptif[,3])
Na <- cbind(Na, descriptif[,8])
colnames(Na) <- c("region", "population", "year", "N", "Nloc", "mean_allrich", "var_allrich", "sd_allrich", "s")
par(mfrow=c(1,1))
plot(mean_allrich~s, data=Na, pch=15, cex=0.5, main="Mean_allrich in function of s")
Na <- subset(all_rich, all_rich$N == 60)
#par(mfrow=c(1,1))
#plot(Na$mean_allrich)
pop_year <- colsplit(Na[,1], split="_", c("pop","year"))
Na <- cbind(pop_year, Na[,-1])
region <- as.data.frame(c(rep("Espagne",6),rep("Corse",9),rep("France",7)))
colnames(region) <- c("Region")
Na <- cbind(region, Na)
rownames(Na) <- c(1:nrow(Na))
Na$year <- as.factor(Na$year)
nb_year <- as.data.frame(c(2,1,2,1,2,1,2,1,3,1,2,3,2,1,3,2,1,2,1,1,2,3), row.names = rownames(Na))
colnames(nb_year) <- c("nb_year")
Na <- cbind(Na, nb_year)
Na$nb_year <- as.factor(Na$nb_year)
descriptif <- read.table(file = "He.csv", sep = ";", header = TRUE, dec = ",")
descriptif[,3] <- as.factor(descriptif[,3])
View(descriptif)
Na <- cbind(Na, descriptif[,8])
colnames(Na) <- c("region", "population", "year", "N", "Nloc", "mean_allrich", "var_allrich", "sd_allrich", "nb_year", "s")
View(descriptif)
par(mfrow=c(1,1))
plot(mean_allrich~s, data=Na, pch=15, cex=0.5, main="Mean_allrich in function of s")
plot(Na$s)
shapiro.test(Na$s)
reg_region <- lm(He~Region, data=descriptif)
anova(reg_region)
summary(reg_region)
shapiro.test(descriptif$He)
qqnorm(Na$mean_allrich)
qqnorm(descriptif$He)
qqline(descriptif$He)
qqnorm(Na$mean_allrich)
qqline(Na$mean_allrich)
hist(Na$mean_allrich, main="")
hist(Na$mean_allrich, main="", col="grey")
par(mfrow=c(1,2))
hist(Na$mean_allrich, main="", col="grey")
qqnorm(Na$mean_allrich)
qqline(Na$mean_allrich)
par(mfrow=c(1,2))
hist(Na$mean_allrich, main="Mean_allrich distribution", ylab="mean allelic richness", col="grey")
qqnorm(Na$mean_allrich)
par(mfrow=c(1,2))
hist(Na$mean_allrich, main="Mean_allrich distribution", xlab="mean allelic richness", col="grey")
qqnorm(Na$mean_allrich)
qqline(Na$mean_allrich)
qqnorm(rnorm(100, mean = 5, sd = 3))
qqline(rnorm(100, mean = 5, sd = 3))
shapiro.test(rnorm(100, mean = 5, sd = 3))
qqnorm(runif(100, min = 2, max = 4))
qqline(runif(100, min = 2, max = 4))
shapiro.test(runif(100, min = 2, max = 4))
set.seed(100)
x <- rbinom(15,5,.6)
qqnorm(x)
qqline(x)
shapiro.test(x)
par(mfrow=c(1,2))
hist(Na$mean_allrich, main="Mean_allrich distribution", xlab="mean allelic richness", col="grey")
qqnorm(Na$mean_allrich)
qqline(Na$mean_allrich)
shapiro.test(Na$mean_allrich)
x <- exp(rnorm(30))
qqnorm(x)
qqline(x)
shapiro.test(x)
qqnorm(Na$mean_allrich)
qqline(Na$mean_allrich)
par(mfrow=c(1,3))
plot(mean_allrich~Region, data=Na, main="Mean_allrich in function of region")
plot(mean_allrich~pop, data=Na, las=2, main = "Mean_allrich in function of population")
plot(mean_allrich~nb_year, data=Na, las=1, main = "Mean_allrich in function of year")
tukey <- TukeyHSD(reg_pop)
reg_pop <- lm(mean_allrich~pop, data=Na)
anova(reg_pop)
summary(reg_pop)
Na <- subset(all_rich, all_rich$N == 60)
#par(mfrow=c(1,1))
#plot(Na$mean_allrich)
pop_year <- colsplit(Na[,1], split="_", c("pop","year"))
Na <- cbind(pop_year, Na[,-1])
region <- as.data.frame(c(rep("Espagne",6),rep("Corse",9),rep("France",7)))
colnames(region) <- c("Region")
Na <- cbind(region, Na)
rownames(Na) <- c(1:nrow(Na))
Na$year <- as.factor(Na$year)
nb_year <- as.data.frame(c(2,1,2,1,2,1,2,1,3,1,2,3,2,1,3,2,1,2,1,1,2,3), row.names = rownames(Na))
colnames(nb_year) <- c("nb_year")
Na <- cbind(Na, nb_year)
Na$nb_year <- as.factor(Na$nb_year)
reg_pop <- lm(mean_allrich~pop, data=Na)
anova(reg_pop)
summary(reg_pop)
tukey <- TukeyHSD(reg_pop)
reg_pop <- aov(mean_allrich~pop, data=Na)
summary.lm(reg_pop)
tukey <- TukeyHSD(reg_pop)
tukey
plot(tukey)
print(tukey)
lnl_04=-97.0318487063306
lnl_10= -639.204119445094
lnl_constrained=-737.438552667868
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev, 1, lower.tail = FALSE)
lnl_04=-639.204119445094
lnl_10=-158.179966931299
lnl_constrained=-118.595323260513
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev, 1, lower.tail = FALSE)
lnl_04=-639.204119445094
lnl_10=-158.179966931299
lnl_constrained=-801.767894227399
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev, 1, lower.tail = FALSE)
lnl_04=-23.3920431721168
lnl_10=-89.2144621381819
lnl_constrained=-118.595323260513
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev,1,lower.tail = FALSE)
lnl_04=-73.5752217557454
lnl_10=-338.96917107979
lnl_constrained=-415.517747200074
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev,1, lower.tail = FALSE)
lnl_04=-33.7088540126584
lnl_10=-166.566487284293
lnl_constrained=-206.485973210712
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev,1, lower.tail = FALSE)
lnl_04=-20.3252351916352
lnl_10=-83.469459564388
lnl_constrained=-107.848301976694
deltadev=2*(lnl_04+lnl_10-(lnl_constrained))
pchisq(deltadev, 1, lower.tail = FALSE)
help(merge)
help("function")
setwd("~/DATA/Allofecondation/PowerAnalysis")
library(lme4)
library(Matrix)
library(MASS)
library(MuMIn)
library(lattice)
library(boot)
library(RCurl)
options(RCurlOptions=list(cainfo=system.file("CurlSSL","cacert.pem",package="RCurl")))
eval(expr=parse(text=getURL("https://raw.githubusercontent.com/pcdjohnson/sim.glmm/master/sim.glmm.R")))
design <- read.table("ViabilityPowerAnalysis.csv", header = TRUE, sep = ";", dec = ".")
load("modelViability.RData")
sigma_geno <- seq(from = 0, to = 1.1, by = 0.05)
design <- na.omit(design)
sim.viabilityData <- function(infile, varGeno) {
sim.data <- sim.glmm(design.data = infile,
fixed.eff = list(intercept = as.numeric(fixef(bestlogit))),
rand.V = c(IDBox = as.data.frame(VarCorr(bestlogit))[1,4],
IDPod = as.data.frame(VarCorr(bestlogit))[2,4],
Plant = as.data.frame(VarCorr(bestlogit))[3,4],
UniqueGeno = varGeno),
distribution = "binomial")
return(sim.data)
}
mySumm <- function(.) {
c(beta=fixef(.), sigma=as.data.frame(VarCorr(.))[,4])
}
sim.total <- function(NbSimul, infile, varGeno, NbBoot) {
CI_geno <- NULL
for (i in 1:NbSimul) {
mod.fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno),
data = sim.viabilityData(infile, varGeno),
family = "binomial"(link = "logit"),
weights = n, na.action = na.omit)
require(boot)
bootstrap <- bootMer(mod.fit, mySumm, nsim = NbBoot)
bCI.2 <- boot.ci(bootstrap, conf = 0.95, index=5, type="norm")
CI.geno.tmp <- as.data.frame(bCI.2[4])
CI.geno.tmp[,4] <- varGeno
CI_geno <- rbind(CI_geno, CI.geno.tmp)
}
return(CI_geno)
}
NbSimul = 2
NbBoot = 5
CI_simul <- NULL
for (geno in sigma_geno) {
CI_simul_tmp <- sim.total(NbSimul = NbSimul, infile = design, varGeno = geno, NbBoot = NbBoot)
CI_simul <- rbind(CI_simul, CI_simul_tmp)
}
View(CI_simul_tmp)
sim.total <- function(NbSimul, infile, varGeno, NbBoot) {
CI_geno <- NULL
for (i in 1:NbSimul) {
mod.fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno),
data = sim.viabilityData(infile, varGeno),
family = "binomial"(link = "logit"),
weights = n, na.action = na.omit)
require(boot)
bootstrap <- bootMer(mod.fit, mySumm, nsim = NbBoot)
bCI.2 <- boot.ci(bootstrap, conf = 0.95, index=5, type="norm")
CI.geno.tmp <- as.data.frame(bCI.2[4])
CI.geno.tmp[,4] <- varGeno
colnames(CI_geno) <- c("normal.perc", "normal.inf", "normal.sup", "varGeno")
CI_geno <- rbind(CI_geno, CI.geno.tmp)
}
return(CI_geno)
}
NbSimul = 2
NbBoot = 5
CI_simul <- NULL
for (geno in sigma_geno) {
CI_simul_tmp <- sim.total(NbSimul = NbSimul, infile = design, varGeno = geno, NbBoot = NbBoot)
CI_simul <- rbind(CI_simul, CI_simul_tmp)
}
sim.total <- function(NbSimul, infile, varGeno, NbBoot) {
CI_geno <- NULL
for (i in 1:NbSimul) {
mod.fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno),
data = sim.viabilityData(infile, varGeno),
family = "binomial"(link = "logit"),
weights = n, na.action = na.omit)
require(boot)
bootstrap <- bootMer(mod.fit, mySumm, nsim = NbBoot)
bCI.2 <- boot.ci(bootstrap, conf = 0.95, index=5, type="norm")
CI.geno.tmp <- as.data.frame(bCI.2[4])
CI.geno.tmp[,4] <- varGeno
colnames(CI.geno.tmp) <- c("normal.perc", "normal.inf", "normal.sup", "varGeno")
CI_geno <- rbind(CI_geno, CI.geno.tmp)
}
return(CI_geno)
}
NbSimul = 2
NbBoot = 5
CI_simul <- NULL
for (geno in sigma_geno) {
CI_simul_tmp <- sim.total(NbSimul = NbSimul, infile = design, varGeno = geno, NbBoot = NbBoot)
CI_simul <- rbind(CI_simul, CI_simul_tmp)
}
View(CI_simul)
sim.total <- function(NbSimul, infile, varGeno, NbBoot) {
CI_geno <- NULL
for (i in 1:NbSimul) {
mod.fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno),
data = sim.viabilityData(infile, varGeno),
family = "binomial"(link = "logit"),
weights = n, na.action = na.omit)
est.varGeno <- as.data.frame(VarCorr(mod.fit))[,4]
require(boot)
bootstrap <- bootMer(mod.fit, mySumm, nsim = NbBoot)
bCI.2 <- boot.ci(bootstrap, conf = 0.95, index=5, type="norm")
CI.geno.tmp <- as.data.frame(bCI.2[4])
CI.geno.tmp[,4] <- varGeno
CI.geno.tmp[,5] <- est.varGeno
colnames(CI.geno.tmp) <- c("normal.perc", "normal.inf", "normal.sup", "varGeno", "estimated.varGeno")
CI_geno <- rbind(CI_geno, CI.geno.tmp)
}
return(CI_geno)
}
NbSimul = 2
NbBoot = 5
CI_simul <- NULL
for (geno in sigma_geno) {
CI_simul_tmp <- sim.total(NbSimul = NbSimul, infile = design, varGeno = geno, NbBoot = NbBoot)
CI_simul <- rbind(CI_simul, CI_simul_tmp)
}
as.data.frame(VarCorr(bestlogit))[,4]
as.data.frame(VarCorr(bestlogit))
viabilityData <- sim.glmm(design.data = design,
fixed.eff = list(intercept = 1.2383),
rand.V = c(IDBox = 0.2912, IDPod = 0.9749, Plant = 0.7432, UniqueGeno = 0.1),
distribution = "binomial")
fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno), data = viabilityData, family = "binomial"(link = 'logit'), weights = n, na.action = na.omit)
summary(fit)
VarCorr(fit)
as.data.frame(VarCorr(fit))
as.data.frame(VarCorr(fit))[,4]
as.data.frame(VarCorr(fit))[4,4]
sim.total <- function(NbSimul, infile, varGeno, NbBoot) {
CI_geno <- NULL
for (i in 1:NbSimul) {
mod.fit <- glmer(response/n ~ (1|IDBox) + (1|IDPod) + (1|Plant) + (1|UniqueGeno),
data = sim.viabilityData(infile, varGeno),
family = "binomial"(link = "logit"),
weights = n, na.action = na.omit)
est.varGeno <- as.data.frame(VarCorr(mod.fit))[4,4]
require(boot)
bootstrap <- bootMer(mod.fit, mySumm, nsim = NbBoot)
bCI.2 <- boot.ci(bootstrap, conf = 0.95, index=5, type="norm")
CI.geno.tmp <- as.data.frame(bCI.2[4])
CI.geno.tmp[,4] <- varGeno
CI.geno.tmp[,5] <- est.varGeno
colnames(CI.geno.tmp) <- c("normal.perc", "normal.inf", "normal.sup", "varGeno", "estimated.varGeno")
CI_geno <- rbind(CI_geno, CI.geno.tmp)
}
return(CI_geno)
}
mySumm(fit)
NbSimul = 2
NbBoot = 5
CI_simul <- NULL
for (geno in sigma_geno) {
CI_simul_tmp <- sim.total(NbSimul = NbSimul, infile = design, varGeno = geno, NbBoot = NbBoot)
CI_simul <- rbind(CI_simul, CI_simul_tmp)
}
View(CI_simul)
test <- CI_simul[varGeno == 0.05]
test <- CI_simul[Ci_simul$varGeno == 0.05]
test <- CI_simul[CI_simul$varGeno == 0.05]
View(test)
